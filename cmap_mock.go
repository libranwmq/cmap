// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package cmap

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockConcurrentMapInterface creates a new instance of MockConcurrentMapInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConcurrentMapInterface[K Stringer, V any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConcurrentMapInterface[K, V] {
	mock := &MockConcurrentMapInterface[K, V]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConcurrentMapInterface is an autogenerated mock type for the ConcurrentMapInterface type
type MockConcurrentMapInterface[K Stringer, V any] struct {
	mock.Mock
}

type MockConcurrentMapInterface_Expecter[K Stringer, V any] struct {
	mock *mock.Mock
}

func (_m *MockConcurrentMapInterface[K, V]) EXPECT() *MockConcurrentMapInterface_Expecter[K, V] {
	return &MockConcurrentMapInterface_Expecter[K, V]{mock: &_m.Mock}
}

// Clear provides a mock function for the type MockConcurrentMapInterface
func (_mock *MockConcurrentMapInterface[K, V]) Clear() {
	_mock.Called()
	return
}

// MockConcurrentMapInterface_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type MockConcurrentMapInterface_Clear_Call[K Stringer, V any] struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
func (_e *MockConcurrentMapInterface_Expecter[K, V]) Clear() *MockConcurrentMapInterface_Clear_Call[K, V] {
	return &MockConcurrentMapInterface_Clear_Call[K, V]{Call: _e.mock.On("Clear")}
}

func (_c *MockConcurrentMapInterface_Clear_Call[K, V]) Run(run func()) *MockConcurrentMapInterface_Clear_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConcurrentMapInterface_Clear_Call[K, V]) Return() *MockConcurrentMapInterface_Clear_Call[K, V] {
	_c.Call.Return()
	return _c
}

func (_c *MockConcurrentMapInterface_Clear_Call[K, V]) RunAndReturn(run func()) *MockConcurrentMapInterface_Clear_Call[K, V] {
	_c.Run(run)
	return _c
}

// Count provides a mock function for the type MockConcurrentMapInterface
func (_mock *MockConcurrentMapInterface[K, V]) Count() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockConcurrentMapInterface_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockConcurrentMapInterface_Count_Call[K Stringer, V any] struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
func (_e *MockConcurrentMapInterface_Expecter[K, V]) Count() *MockConcurrentMapInterface_Count_Call[K, V] {
	return &MockConcurrentMapInterface_Count_Call[K, V]{Call: _e.mock.On("Count")}
}

func (_c *MockConcurrentMapInterface_Count_Call[K, V]) Run(run func()) *MockConcurrentMapInterface_Count_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConcurrentMapInterface_Count_Call[K, V]) Return(n int) *MockConcurrentMapInterface_Count_Call[K, V] {
	_c.Call.Return(n)
	return _c
}

func (_c *MockConcurrentMapInterface_Count_Call[K, V]) RunAndReturn(run func() int) *MockConcurrentMapInterface_Count_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockConcurrentMapInterface
func (_mock *MockConcurrentMapInterface[K, V]) Get(key K) (V, bool) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 V
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(K) (V, bool)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(K) V); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(V)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(K) bool); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockConcurrentMapInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockConcurrentMapInterface_Get_Call[K Stringer, V any] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key K
func (_e *MockConcurrentMapInterface_Expecter[K, V]) Get(key interface{}) *MockConcurrentMapInterface_Get_Call[K, V] {
	return &MockConcurrentMapInterface_Get_Call[K, V]{Call: _e.mock.On("Get", key)}
}

func (_c *MockConcurrentMapInterface_Get_Call[K, V]) Run(run func(key K)) *MockConcurrentMapInterface_Get_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 K
		if args[0] != nil {
			arg0 = args[0].(K)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConcurrentMapInterface_Get_Call[K, V]) Return(v V, b bool) *MockConcurrentMapInterface_Get_Call[K, V] {
	_c.Call.Return(v, b)
	return _c
}

func (_c *MockConcurrentMapInterface_Get_Call[K, V]) RunAndReturn(run func(key K) (V, bool)) *MockConcurrentMapInterface_Get_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// GetSlot provides a mock function for the type MockConcurrentMapInterface
func (_mock *MockConcurrentMapInterface[K, V]) GetSlot(key K) *ConcurrentMapSlotted[K, V] {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetSlot")
	}

	var r0 *ConcurrentMapSlotted[K, V]
	if returnFunc, ok := ret.Get(0).(func(K) *ConcurrentMapSlotted[K, V]); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ConcurrentMapSlotted[K, V])
		}
	}
	return r0
}

// MockConcurrentMapInterface_GetSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlot'
type MockConcurrentMapInterface_GetSlot_Call[K Stringer, V any] struct {
	*mock.Call
}

// GetSlot is a helper method to define mock.On call
//   - key K
func (_e *MockConcurrentMapInterface_Expecter[K, V]) GetSlot(key interface{}) *MockConcurrentMapInterface_GetSlot_Call[K, V] {
	return &MockConcurrentMapInterface_GetSlot_Call[K, V]{Call: _e.mock.On("GetSlot", key)}
}

func (_c *MockConcurrentMapInterface_GetSlot_Call[K, V]) Run(run func(key K)) *MockConcurrentMapInterface_GetSlot_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 K
		if args[0] != nil {
			arg0 = args[0].(K)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConcurrentMapInterface_GetSlot_Call[K, V]) Return(concurrentMapSlotted *ConcurrentMapSlotted[K, V]) *MockConcurrentMapInterface_GetSlot_Call[K, V] {
	_c.Call.Return(concurrentMapSlotted)
	return _c
}

func (_c *MockConcurrentMapInterface_GetSlot_Call[K, V]) RunAndReturn(run func(key K) *ConcurrentMapSlotted[K, V]) *MockConcurrentMapInterface_GetSlot_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// GetSlotNum provides a mock function for the type MockConcurrentMapInterface
func (_mock *MockConcurrentMapInterface[K, V]) GetSlotNum() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSlotNum")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockConcurrentMapInterface_GetSlotNum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlotNum'
type MockConcurrentMapInterface_GetSlotNum_Call[K Stringer, V any] struct {
	*mock.Call
}

// GetSlotNum is a helper method to define mock.On call
func (_e *MockConcurrentMapInterface_Expecter[K, V]) GetSlotNum() *MockConcurrentMapInterface_GetSlotNum_Call[K, V] {
	return &MockConcurrentMapInterface_GetSlotNum_Call[K, V]{Call: _e.mock.On("GetSlotNum")}
}

func (_c *MockConcurrentMapInterface_GetSlotNum_Call[K, V]) Run(run func()) *MockConcurrentMapInterface_GetSlotNum_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConcurrentMapInterface_GetSlotNum_Call[K, V]) Return(n int) *MockConcurrentMapInterface_GetSlotNum_Call[K, V] {
	_c.Call.Return(n)
	return _c
}

func (_c *MockConcurrentMapInterface_GetSlotNum_Call[K, V]) RunAndReturn(run func() int) *MockConcurrentMapInterface_GetSlotNum_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// GetSlotkeyNum provides a mock function for the type MockConcurrentMapInterface
func (_mock *MockConcurrentMapInterface[K, V]) GetSlotkeyNum(idx int) int {
	ret := _mock.Called(idx)

	if len(ret) == 0 {
		panic("no return value specified for GetSlotkeyNum")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func(int) int); ok {
		r0 = returnFunc(idx)
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockConcurrentMapInterface_GetSlotkeyNum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlotkeyNum'
type MockConcurrentMapInterface_GetSlotkeyNum_Call[K Stringer, V any] struct {
	*mock.Call
}

// GetSlotkeyNum is a helper method to define mock.On call
//   - idx int
func (_e *MockConcurrentMapInterface_Expecter[K, V]) GetSlotkeyNum(idx interface{}) *MockConcurrentMapInterface_GetSlotkeyNum_Call[K, V] {
	return &MockConcurrentMapInterface_GetSlotkeyNum_Call[K, V]{Call: _e.mock.On("GetSlotkeyNum", idx)}
}

func (_c *MockConcurrentMapInterface_GetSlotkeyNum_Call[K, V]) Run(run func(idx int)) *MockConcurrentMapInterface_GetSlotkeyNum_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConcurrentMapInterface_GetSlotkeyNum_Call[K, V]) Return(n int) *MockConcurrentMapInterface_GetSlotkeyNum_Call[K, V] {
	_c.Call.Return(n)
	return _c
}

func (_c *MockConcurrentMapInterface_GetSlotkeyNum_Call[K, V]) RunAndReturn(run func(idx int) int) *MockConcurrentMapInterface_GetSlotkeyNum_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// GetSlots provides a mock function for the type MockConcurrentMapInterface
func (_mock *MockConcurrentMapInterface[K, V]) GetSlots(idx int) *ConcurrentMapSlotted[K, V] {
	ret := _mock.Called(idx)

	if len(ret) == 0 {
		panic("no return value specified for GetSlots")
	}

	var r0 *ConcurrentMapSlotted[K, V]
	if returnFunc, ok := ret.Get(0).(func(int) *ConcurrentMapSlotted[K, V]); ok {
		r0 = returnFunc(idx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ConcurrentMapSlotted[K, V])
		}
	}
	return r0
}

// MockConcurrentMapInterface_GetSlots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlots'
type MockConcurrentMapInterface_GetSlots_Call[K Stringer, V any] struct {
	*mock.Call
}

// GetSlots is a helper method to define mock.On call
//   - idx int
func (_e *MockConcurrentMapInterface_Expecter[K, V]) GetSlots(idx interface{}) *MockConcurrentMapInterface_GetSlots_Call[K, V] {
	return &MockConcurrentMapInterface_GetSlots_Call[K, V]{Call: _e.mock.On("GetSlots", idx)}
}

func (_c *MockConcurrentMapInterface_GetSlots_Call[K, V]) Run(run func(idx int)) *MockConcurrentMapInterface_GetSlots_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConcurrentMapInterface_GetSlots_Call[K, V]) Return(concurrentMapSlotted *ConcurrentMapSlotted[K, V]) *MockConcurrentMapInterface_GetSlots_Call[K, V] {
	_c.Call.Return(concurrentMapSlotted)
	return _c
}

func (_c *MockConcurrentMapInterface_GetSlots_Call[K, V]) RunAndReturn(run func(idx int) *ConcurrentMapSlotted[K, V]) *MockConcurrentMapInterface_GetSlots_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Has provides a mock function for the type MockConcurrentMapInterface
func (_mock *MockConcurrentMapInterface[K, V]) Has(key K) bool {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(K) bool); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockConcurrentMapInterface_Has_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Has'
type MockConcurrentMapInterface_Has_Call[K Stringer, V any] struct {
	*mock.Call
}

// Has is a helper method to define mock.On call
//   - key K
func (_e *MockConcurrentMapInterface_Expecter[K, V]) Has(key interface{}) *MockConcurrentMapInterface_Has_Call[K, V] {
	return &MockConcurrentMapInterface_Has_Call[K, V]{Call: _e.mock.On("Has", key)}
}

func (_c *MockConcurrentMapInterface_Has_Call[K, V]) Run(run func(key K)) *MockConcurrentMapInterface_Has_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 K
		if args[0] != nil {
			arg0 = args[0].(K)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConcurrentMapInterface_Has_Call[K, V]) Return(b bool) *MockConcurrentMapInterface_Has_Call[K, V] {
	_c.Call.Return(b)
	return _c
}

func (_c *MockConcurrentMapInterface_Has_Call[K, V]) RunAndReturn(run func(key K) bool) *MockConcurrentMapInterface_Has_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// IsEmpty provides a mock function for the type MockConcurrentMapInterface
func (_mock *MockConcurrentMapInterface[K, V]) IsEmpty() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsEmpty")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockConcurrentMapInterface_IsEmpty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEmpty'
type MockConcurrentMapInterface_IsEmpty_Call[K Stringer, V any] struct {
	*mock.Call
}

// IsEmpty is a helper method to define mock.On call
func (_e *MockConcurrentMapInterface_Expecter[K, V]) IsEmpty() *MockConcurrentMapInterface_IsEmpty_Call[K, V] {
	return &MockConcurrentMapInterface_IsEmpty_Call[K, V]{Call: _e.mock.On("IsEmpty")}
}

func (_c *MockConcurrentMapInterface_IsEmpty_Call[K, V]) Run(run func()) *MockConcurrentMapInterface_IsEmpty_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConcurrentMapInterface_IsEmpty_Call[K, V]) Return(b bool) *MockConcurrentMapInterface_IsEmpty_Call[K, V] {
	_c.Call.Return(b)
	return _c
}

func (_c *MockConcurrentMapInterface_IsEmpty_Call[K, V]) RunAndReturn(run func() bool) *MockConcurrentMapInterface_IsEmpty_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Items provides a mock function for the type MockConcurrentMapInterface
func (_mock *MockConcurrentMapInterface[K, V]) Items() map[K]V {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Items")
	}

	var r0 map[K]V
	if returnFunc, ok := ret.Get(0).(func() map[K]V); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[K]V)
		}
	}
	return r0
}

// MockConcurrentMapInterface_Items_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Items'
type MockConcurrentMapInterface_Items_Call[K Stringer, V any] struct {
	*mock.Call
}

// Items is a helper method to define mock.On call
func (_e *MockConcurrentMapInterface_Expecter[K, V]) Items() *MockConcurrentMapInterface_Items_Call[K, V] {
	return &MockConcurrentMapInterface_Items_Call[K, V]{Call: _e.mock.On("Items")}
}

func (_c *MockConcurrentMapInterface_Items_Call[K, V]) Run(run func()) *MockConcurrentMapInterface_Items_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConcurrentMapInterface_Items_Call[K, V]) Return(vToV map[K]V) *MockConcurrentMapInterface_Items_Call[K, V] {
	_c.Call.Return(vToV)
	return _c
}

func (_c *MockConcurrentMapInterface_Items_Call[K, V]) RunAndReturn(run func() map[K]V) *MockConcurrentMapInterface_Items_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Iter provides a mock function for the type MockConcurrentMapInterface
func (_mock *MockConcurrentMapInterface[K, V]) Iter() <-chan Tuple[K, V] {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Iter")
	}

	var r0 <-chan Tuple[K, V]
	if returnFunc, ok := ret.Get(0).(func() <-chan Tuple[K, V]); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan Tuple[K, V])
		}
	}
	return r0
}

// MockConcurrentMapInterface_Iter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Iter'
type MockConcurrentMapInterface_Iter_Call[K Stringer, V any] struct {
	*mock.Call
}

// Iter is a helper method to define mock.On call
func (_e *MockConcurrentMapInterface_Expecter[K, V]) Iter() *MockConcurrentMapInterface_Iter_Call[K, V] {
	return &MockConcurrentMapInterface_Iter_Call[K, V]{Call: _e.mock.On("Iter")}
}

func (_c *MockConcurrentMapInterface_Iter_Call[K, V]) Run(run func()) *MockConcurrentMapInterface_Iter_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConcurrentMapInterface_Iter_Call[K, V]) Return(tupleCh <-chan Tuple[K, V]) *MockConcurrentMapInterface_Iter_Call[K, V] {
	_c.Call.Return(tupleCh)
	return _c
}

func (_c *MockConcurrentMapInterface_Iter_Call[K, V]) RunAndReturn(run func() <-chan Tuple[K, V]) *MockConcurrentMapInterface_Iter_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// IterCb provides a mock function for the type MockConcurrentMapInterface
func (_mock *MockConcurrentMapInterface[K, V]) IterCb(key K, v V, cb IterCb[K, V]) {
	_mock.Called(key, v, cb)
	return
}

// MockConcurrentMapInterface_IterCb_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IterCb'
type MockConcurrentMapInterface_IterCb_Call[K Stringer, V any] struct {
	*mock.Call
}

// IterCb is a helper method to define mock.On call
//   - key K
//   - v V
//   - cb IterCb[K, V]
func (_e *MockConcurrentMapInterface_Expecter[K, V]) IterCb(key interface{}, v interface{}, cb interface{}) *MockConcurrentMapInterface_IterCb_Call[K, V] {
	return &MockConcurrentMapInterface_IterCb_Call[K, V]{Call: _e.mock.On("IterCb", key, v, cb)}
}

func (_c *MockConcurrentMapInterface_IterCb_Call[K, V]) Run(run func(key K, v V, cb IterCb[K, V])) *MockConcurrentMapInterface_IterCb_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 K
		if args[0] != nil {
			arg0 = args[0].(K)
		}
		var arg1 V
		if args[1] != nil {
			arg1 = args[1].(V)
		}
		var arg2 IterCb[K, V]
		if args[2] != nil {
			arg2 = args[2].(IterCb[K, V])
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockConcurrentMapInterface_IterCb_Call[K, V]) Return() *MockConcurrentMapInterface_IterCb_Call[K, V] {
	_c.Call.Return()
	return _c
}

func (_c *MockConcurrentMapInterface_IterCb_Call[K, V]) RunAndReturn(run func(key K, v V, cb IterCb[K, V])) *MockConcurrentMapInterface_IterCb_Call[K, V] {
	_c.Run(run)
	return _c
}

// Keys provides a mock function for the type MockConcurrentMapInterface
func (_mock *MockConcurrentMapInterface[K, V]) Keys() []K {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Keys")
	}

	var r0 []K
	if returnFunc, ok := ret.Get(0).(func() []K); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]K)
		}
	}
	return r0
}

// MockConcurrentMapInterface_Keys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Keys'
type MockConcurrentMapInterface_Keys_Call[K Stringer, V any] struct {
	*mock.Call
}

// Keys is a helper method to define mock.On call
func (_e *MockConcurrentMapInterface_Expecter[K, V]) Keys() *MockConcurrentMapInterface_Keys_Call[K, V] {
	return &MockConcurrentMapInterface_Keys_Call[K, V]{Call: _e.mock.On("Keys")}
}

func (_c *MockConcurrentMapInterface_Keys_Call[K, V]) Run(run func()) *MockConcurrentMapInterface_Keys_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConcurrentMapInterface_Keys_Call[K, V]) Return(vs []K) *MockConcurrentMapInterface_Keys_Call[K, V] {
	_c.Call.Return(vs)
	return _c
}

func (_c *MockConcurrentMapInterface_Keys_Call[K, V]) RunAndReturn(run func() []K) *MockConcurrentMapInterface_Keys_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// ListSlots provides a mock function for the type MockConcurrentMapInterface
func (_mock *MockConcurrentMapInterface[K, V]) ListSlots() []*ConcurrentMapSlotted[K, V] {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListSlots")
	}

	var r0 []*ConcurrentMapSlotted[K, V]
	if returnFunc, ok := ret.Get(0).(func() []*ConcurrentMapSlotted[K, V]); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ConcurrentMapSlotted[K, V])
		}
	}
	return r0
}

// MockConcurrentMapInterface_ListSlots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSlots'
type MockConcurrentMapInterface_ListSlots_Call[K Stringer, V any] struct {
	*mock.Call
}

// ListSlots is a helper method to define mock.On call
func (_e *MockConcurrentMapInterface_Expecter[K, V]) ListSlots() *MockConcurrentMapInterface_ListSlots_Call[K, V] {
	return &MockConcurrentMapInterface_ListSlots_Call[K, V]{Call: _e.mock.On("ListSlots")}
}

func (_c *MockConcurrentMapInterface_ListSlots_Call[K, V]) Run(run func()) *MockConcurrentMapInterface_ListSlots_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConcurrentMapInterface_ListSlots_Call[K, V]) Return(concurrentMapSlotteds []*ConcurrentMapSlotted[K, V]) *MockConcurrentMapInterface_ListSlots_Call[K, V] {
	_c.Call.Return(concurrentMapSlotteds)
	return _c
}

func (_c *MockConcurrentMapInterface_ListSlots_Call[K, V]) RunAndReturn(run func() []*ConcurrentMapSlotted[K, V]) *MockConcurrentMapInterface_ListSlots_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// MSet provides a mock function for the type MockConcurrentMapInterface
func (_mock *MockConcurrentMapInterface[K, V]) MSet(data map[K]V) {
	_mock.Called(data)
	return
}

// MockConcurrentMapInterface_MSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MSet'
type MockConcurrentMapInterface_MSet_Call[K Stringer, V any] struct {
	*mock.Call
}

// MSet is a helper method to define mock.On call
//   - data map[K]V
func (_e *MockConcurrentMapInterface_Expecter[K, V]) MSet(data interface{}) *MockConcurrentMapInterface_MSet_Call[K, V] {
	return &MockConcurrentMapInterface_MSet_Call[K, V]{Call: _e.mock.On("MSet", data)}
}

func (_c *MockConcurrentMapInterface_MSet_Call[K, V]) Run(run func(data map[K]V)) *MockConcurrentMapInterface_MSet_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 map[K]V
		if args[0] != nil {
			arg0 = args[0].(map[K]V)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConcurrentMapInterface_MSet_Call[K, V]) Return() *MockConcurrentMapInterface_MSet_Call[K, V] {
	_c.Call.Return()
	return _c
}

func (_c *MockConcurrentMapInterface_MSet_Call[K, V]) RunAndReturn(run func(data map[K]V)) *MockConcurrentMapInterface_MSet_Call[K, V] {
	_c.Run(run)
	return _c
}

// MarshalJSON provides a mock function for the type MockConcurrentMapInterface
func (_mock *MockConcurrentMapInterface[K, V]) MarshalJSON() ([]byte, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for MarshalJSON")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConcurrentMapInterface_MarshalJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalJSON'
type MockConcurrentMapInterface_MarshalJSON_Call[K Stringer, V any] struct {
	*mock.Call
}

// MarshalJSON is a helper method to define mock.On call
func (_e *MockConcurrentMapInterface_Expecter[K, V]) MarshalJSON() *MockConcurrentMapInterface_MarshalJSON_Call[K, V] {
	return &MockConcurrentMapInterface_MarshalJSON_Call[K, V]{Call: _e.mock.On("MarshalJSON")}
}

func (_c *MockConcurrentMapInterface_MarshalJSON_Call[K, V]) Run(run func()) *MockConcurrentMapInterface_MarshalJSON_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConcurrentMapInterface_MarshalJSON_Call[K, V]) Return(bytes []byte, err error) *MockConcurrentMapInterface_MarshalJSON_Call[K, V] {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockConcurrentMapInterface_MarshalJSON_Call[K, V]) RunAndReturn(run func() ([]byte, error)) *MockConcurrentMapInterface_MarshalJSON_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Pop provides a mock function for the type MockConcurrentMapInterface
func (_mock *MockConcurrentMapInterface[K, V]) Pop(key K) (V, bool) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Pop")
	}

	var r0 V
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(K) (V, bool)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(K) V); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(V)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(K) bool); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockConcurrentMapInterface_Pop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pop'
type MockConcurrentMapInterface_Pop_Call[K Stringer, V any] struct {
	*mock.Call
}

// Pop is a helper method to define mock.On call
//   - key K
func (_e *MockConcurrentMapInterface_Expecter[K, V]) Pop(key interface{}) *MockConcurrentMapInterface_Pop_Call[K, V] {
	return &MockConcurrentMapInterface_Pop_Call[K, V]{Call: _e.mock.On("Pop", key)}
}

func (_c *MockConcurrentMapInterface_Pop_Call[K, V]) Run(run func(key K)) *MockConcurrentMapInterface_Pop_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 K
		if args[0] != nil {
			arg0 = args[0].(K)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConcurrentMapInterface_Pop_Call[K, V]) Return(v V, ok bool) *MockConcurrentMapInterface_Pop_Call[K, V] {
	_c.Call.Return(v, ok)
	return _c
}

func (_c *MockConcurrentMapInterface_Pop_Call[K, V]) RunAndReturn(run func(key K) (V, bool)) *MockConcurrentMapInterface_Pop_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function for the type MockConcurrentMapInterface
func (_mock *MockConcurrentMapInterface[K, V]) Remove(key K) {
	_mock.Called(key)
	return
}

// MockConcurrentMapInterface_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockConcurrentMapInterface_Remove_Call[K Stringer, V any] struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - key K
func (_e *MockConcurrentMapInterface_Expecter[K, V]) Remove(key interface{}) *MockConcurrentMapInterface_Remove_Call[K, V] {
	return &MockConcurrentMapInterface_Remove_Call[K, V]{Call: _e.mock.On("Remove", key)}
}

func (_c *MockConcurrentMapInterface_Remove_Call[K, V]) Run(run func(key K)) *MockConcurrentMapInterface_Remove_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 K
		if args[0] != nil {
			arg0 = args[0].(K)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConcurrentMapInterface_Remove_Call[K, V]) Return() *MockConcurrentMapInterface_Remove_Call[K, V] {
	_c.Call.Return()
	return _c
}

func (_c *MockConcurrentMapInterface_Remove_Call[K, V]) RunAndReturn(run func(key K)) *MockConcurrentMapInterface_Remove_Call[K, V] {
	_c.Run(run)
	return _c
}

// RemoveCb provides a mock function for the type MockConcurrentMapInterface
func (_mock *MockConcurrentMapInterface[K, V]) RemoveCb(key K, cb RemoveCb[K, V]) bool {
	ret := _mock.Called(key, cb)

	if len(ret) == 0 {
		panic("no return value specified for RemoveCb")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(K, RemoveCb[K, V]) bool); ok {
		r0 = returnFunc(key, cb)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockConcurrentMapInterface_RemoveCb_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveCb'
type MockConcurrentMapInterface_RemoveCb_Call[K Stringer, V any] struct {
	*mock.Call
}

// RemoveCb is a helper method to define mock.On call
//   - key K
//   - cb RemoveCb[K, V]
func (_e *MockConcurrentMapInterface_Expecter[K, V]) RemoveCb(key interface{}, cb interface{}) *MockConcurrentMapInterface_RemoveCb_Call[K, V] {
	return &MockConcurrentMapInterface_RemoveCb_Call[K, V]{Call: _e.mock.On("RemoveCb", key, cb)}
}

func (_c *MockConcurrentMapInterface_RemoveCb_Call[K, V]) Run(run func(key K, cb RemoveCb[K, V])) *MockConcurrentMapInterface_RemoveCb_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 K
		if args[0] != nil {
			arg0 = args[0].(K)
		}
		var arg1 RemoveCb[K, V]
		if args[1] != nil {
			arg1 = args[1].(RemoveCb[K, V])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConcurrentMapInterface_RemoveCb_Call[K, V]) Return(b bool) *MockConcurrentMapInterface_RemoveCb_Call[K, V] {
	_c.Call.Return(b)
	return _c
}

func (_c *MockConcurrentMapInterface_RemoveCb_Call[K, V]) RunAndReturn(run func(key K, cb RemoveCb[K, V]) bool) *MockConcurrentMapInterface_RemoveCb_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockConcurrentMapInterface
func (_mock *MockConcurrentMapInterface[K, V]) Set(key K, value V) {
	_mock.Called(key, value)
	return
}

// MockConcurrentMapInterface_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockConcurrentMapInterface_Set_Call[K Stringer, V any] struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key K
//   - value V
func (_e *MockConcurrentMapInterface_Expecter[K, V]) Set(key interface{}, value interface{}) *MockConcurrentMapInterface_Set_Call[K, V] {
	return &MockConcurrentMapInterface_Set_Call[K, V]{Call: _e.mock.On("Set", key, value)}
}

func (_c *MockConcurrentMapInterface_Set_Call[K, V]) Run(run func(key K, value V)) *MockConcurrentMapInterface_Set_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 K
		if args[0] != nil {
			arg0 = args[0].(K)
		}
		var arg1 V
		if args[1] != nil {
			arg1 = args[1].(V)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConcurrentMapInterface_Set_Call[K, V]) Return() *MockConcurrentMapInterface_Set_Call[K, V] {
	_c.Call.Return()
	return _c
}

func (_c *MockConcurrentMapInterface_Set_Call[K, V]) RunAndReturn(run func(key K, value V)) *MockConcurrentMapInterface_Set_Call[K, V] {
	_c.Run(run)
	return _c
}

// SetIfAbsent provides a mock function for the type MockConcurrentMapInterface
func (_mock *MockConcurrentMapInterface[K, V]) SetIfAbsent(key K, value V) bool {
	ret := _mock.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for SetIfAbsent")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(K, V) bool); ok {
		r0 = returnFunc(key, value)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockConcurrentMapInterface_SetIfAbsent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetIfAbsent'
type MockConcurrentMapInterface_SetIfAbsent_Call[K Stringer, V any] struct {
	*mock.Call
}

// SetIfAbsent is a helper method to define mock.On call
//   - key K
//   - value V
func (_e *MockConcurrentMapInterface_Expecter[K, V]) SetIfAbsent(key interface{}, value interface{}) *MockConcurrentMapInterface_SetIfAbsent_Call[K, V] {
	return &MockConcurrentMapInterface_SetIfAbsent_Call[K, V]{Call: _e.mock.On("SetIfAbsent", key, value)}
}

func (_c *MockConcurrentMapInterface_SetIfAbsent_Call[K, V]) Run(run func(key K, value V)) *MockConcurrentMapInterface_SetIfAbsent_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 K
		if args[0] != nil {
			arg0 = args[0].(K)
		}
		var arg1 V
		if args[1] != nil {
			arg1 = args[1].(V)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConcurrentMapInterface_SetIfAbsent_Call[K, V]) Return(b bool) *MockConcurrentMapInterface_SetIfAbsent_Call[K, V] {
	_c.Call.Return(b)
	return _c
}

func (_c *MockConcurrentMapInterface_SetIfAbsent_Call[K, V]) RunAndReturn(run func(key K, value V) bool) *MockConcurrentMapInterface_SetIfAbsent_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Tuples provides a mock function for the type MockConcurrentMapInterface
func (_mock *MockConcurrentMapInterface[K, V]) Tuples() []Tuple[K, V] {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Tuples")
	}

	var r0 []Tuple[K, V]
	if returnFunc, ok := ret.Get(0).(func() []Tuple[K, V]); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Tuple[K, V])
		}
	}
	return r0
}

// MockConcurrentMapInterface_Tuples_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tuples'
type MockConcurrentMapInterface_Tuples_Call[K Stringer, V any] struct {
	*mock.Call
}

// Tuples is a helper method to define mock.On call
func (_e *MockConcurrentMapInterface_Expecter[K, V]) Tuples() *MockConcurrentMapInterface_Tuples_Call[K, V] {
	return &MockConcurrentMapInterface_Tuples_Call[K, V]{Call: _e.mock.On("Tuples")}
}

func (_c *MockConcurrentMapInterface_Tuples_Call[K, V]) Run(run func()) *MockConcurrentMapInterface_Tuples_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConcurrentMapInterface_Tuples_Call[K, V]) Return(tuples []Tuple[K, V]) *MockConcurrentMapInterface_Tuples_Call[K, V] {
	_c.Call.Return(tuples)
	return _c
}

func (_c *MockConcurrentMapInterface_Tuples_Call[K, V]) RunAndReturn(run func() []Tuple[K, V]) *MockConcurrentMapInterface_Tuples_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// UnmarshalJSON provides a mock function for the type MockConcurrentMapInterface
func (_mock *MockConcurrentMapInterface[K, V]) UnmarshalJSON(b []byte) error {
	ret := _mock.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalJSON")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = returnFunc(b)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConcurrentMapInterface_UnmarshalJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalJSON'
type MockConcurrentMapInterface_UnmarshalJSON_Call[K Stringer, V any] struct {
	*mock.Call
}

// UnmarshalJSON is a helper method to define mock.On call
//   - b []byte
func (_e *MockConcurrentMapInterface_Expecter[K, V]) UnmarshalJSON(b interface{}) *MockConcurrentMapInterface_UnmarshalJSON_Call[K, V] {
	return &MockConcurrentMapInterface_UnmarshalJSON_Call[K, V]{Call: _e.mock.On("UnmarshalJSON", b)}
}

func (_c *MockConcurrentMapInterface_UnmarshalJSON_Call[K, V]) Run(run func(b []byte)) *MockConcurrentMapInterface_UnmarshalJSON_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConcurrentMapInterface_UnmarshalJSON_Call[K, V]) Return(err error) *MockConcurrentMapInterface_UnmarshalJSON_Call[K, V] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConcurrentMapInterface_UnmarshalJSON_Call[K, V]) RunAndReturn(run func(b []byte) error) *MockConcurrentMapInterface_UnmarshalJSON_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function for the type MockConcurrentMapInterface
func (_mock *MockConcurrentMapInterface[K, V]) Upsert(key K, value V, cb UpsertCb[K, V]) V {
	ret := _mock.Called(key, value, cb)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 V
	if returnFunc, ok := ret.Get(0).(func(K, V, UpsertCb[K, V]) V); ok {
		r0 = returnFunc(key, value, cb)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(V)
		}
	}
	return r0
}

// MockConcurrentMapInterface_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type MockConcurrentMapInterface_Upsert_Call[K Stringer, V any] struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - key K
//   - value V
//   - cb UpsertCb[K, V]
func (_e *MockConcurrentMapInterface_Expecter[K, V]) Upsert(key interface{}, value interface{}, cb interface{}) *MockConcurrentMapInterface_Upsert_Call[K, V] {
	return &MockConcurrentMapInterface_Upsert_Call[K, V]{Call: _e.mock.On("Upsert", key, value, cb)}
}

func (_c *MockConcurrentMapInterface_Upsert_Call[K, V]) Run(run func(key K, value V, cb UpsertCb[K, V])) *MockConcurrentMapInterface_Upsert_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 K
		if args[0] != nil {
			arg0 = args[0].(K)
		}
		var arg1 V
		if args[1] != nil {
			arg1 = args[1].(V)
		}
		var arg2 UpsertCb[K, V]
		if args[2] != nil {
			arg2 = args[2].(UpsertCb[K, V])
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockConcurrentMapInterface_Upsert_Call[K, V]) Return(v V) *MockConcurrentMapInterface_Upsert_Call[K, V] {
	_c.Call.Return(v)
	return _c
}

func (_c *MockConcurrentMapInterface_Upsert_Call[K, V]) RunAndReturn(run func(key K, value V, cb UpsertCb[K, V]) V) *MockConcurrentMapInterface_Upsert_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// NewMockStringer creates a new instance of MockStringer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStringer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStringer {
	mock := &MockStringer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStringer is an autogenerated mock type for the Stringer type
type MockStringer struct {
	mock.Mock
}

type MockStringer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStringer) EXPECT() *MockStringer_Expecter {
	return &MockStringer_Expecter{mock: &_m.Mock}
}

// String provides a mock function for the type MockStringer
func (_mock *MockStringer) String() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockStringer_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockStringer_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockStringer_Expecter) String() *MockStringer_String_Call {
	return &MockStringer_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockStringer_String_Call) Run(run func()) *MockStringer_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStringer_String_Call) Return(s string) *MockStringer_String_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockStringer_String_Call) RunAndReturn(run func() string) *MockStringer_String_Call {
	_c.Call.Return(run)
	return _c
}
